
#+STARTUP: indent
#+STARTUP: showeverything

* Goal

The goal of this project is to prototype extensible languages in OCaml to find a
good way to represent extensible ASTs which can form the base of a type safe and
convenient macro system.

Step one is to experiment with OCamls variant and GADT types and module system
to find the things which do not work well. Step two will be to design a language
for extensible ASTs.

* Languages

The following small languages will be implemented and combined:

** DONE calc-int
Arithmetic expressions with integers
** DONE calc-float
Arithmetic expressions with floats
** DONE calc
calc-int + calc-float and conversions
** DONE algo-int
Extending calc-int with conditional evaluation
** TODO algo
Extending calc with conditional evaluation, loops, and booleans
** TODO algo-generic
Extending a given language with conditional evaluation and loops

* Building

** Initial one time setup

#+begin_src sh
opam switch create . ocaml-base-compiler.4.10.0 --deps-only
#+end_src

** Build the project

#+begin_src sh
dune build source/calc_demo.exe
dune build source/algo_demo.exe
#+end_src

** Running demo app

#+begin_src sh
dune exec source/calc_demo.exe
dune exec source/algo_demo.exe
#+end_src

